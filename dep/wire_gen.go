// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dep

import (
	"github.com/minghsu0107/saga-purchase/config"
	"github.com/minghsu0107/saga-purchase/infra"
	"github.com/minghsu0107/saga-purchase/infra/broker"
	"github.com/minghsu0107/saga-purchase/infra/grpc"
	"github.com/minghsu0107/saga-purchase/infra/http"
	"github.com/minghsu0107/saga-purchase/infra/http/middleware"
	"github.com/minghsu0107/saga-purchase/repo"
	"github.com/minghsu0107/saga-purchase/service/purchase"
	"github.com/minghsu0107/saga-purchase/service/result"
)

// Injectors from wire.go:

func InitializeServer() (*infra.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	engine := http.NewEngine(configConfig)
	purchaseResultService := result.NewPurchaseResultService(configConfig)
	purchaseResultStreamHandler := http.NewPurchaseResultStreamHandler(purchaseResultService)
	publisher, err := broker.NewNATSPublisher(configConfig)
	if err != nil {
		return nil, err
	}
	purchasingRepository := repo.NewPurchasingRepository(publisher)
	productConn, err := grpc.NewProductConn(configConfig)
	if err != nil {
		return nil, err
	}
	productRepository := repo.NewProductRepository(productConn, configConfig)
	purchasingService := purchase.NewPurchasingService(configConfig, purchasingRepository, productRepository)
	purchasingHandler := http.NewPurchasingHandler(purchasingService)
	router := http.NewRouter(purchaseResultStreamHandler, purchasingHandler)
	subscriber, err := broker.NewNATSSubscriber(configConfig)
	if err != nil {
		return nil, err
	}
	sseRouter, err := broker.NewSSERouter(subscriber)
	if err != nil {
		return nil, err
	}
	authConn, err := grpc.NewAuthConn(configConfig)
	if err != nil {
		return nil, err
	}
	authRepository := repo.NewAuthRepository(authConn, configConfig)
	jwtAuthChecker := middleware.NewJWTAuthChecker(configConfig, authRepository)
	server := http.NewServer(configConfig, engine, router, sseRouter, jwtAuthChecker)
	infraServer := infra.NewServer(server)
	return infraServer, nil
}
